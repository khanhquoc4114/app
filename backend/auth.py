from datetime import datetime, timedelta
from email.mime.multipart import MIMEMultipart
import os
import smtplib
from fastapi import Depends, HTTPException
from jose import JWTError, jwt
from passlib.context import CryptContext
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from database import get_db
from models import User


FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:3000")
SECRET_KEY = "my-secret-key-123"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60
SMTP_HOST = os.getenv("SMTP_HOST", "smtp.gmail.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", 587))
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
FROM_EMAIL = os.getenv("FROM_EMAIL", SMTP_USER)

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/auth/login")

def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def verify_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload
    except JWTError:
        return None

def hash_password(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

# JWT functions (t·ª´ code c·ªßa b·∫°n)
def create_reset_token(data: dict, expires_minutes: int = 15):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=expires_minutes)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def verify_reset_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload
    except JWTError:
        return None

async def send_reset_password_email(email: str, reset_token: str, user_name: str = None):
    """G·ª≠i email reset password"""
    try:
        reset_url = f"{FRONTEND_URL}/reset-password/{reset_token}"
        
        # T·∫°o n·ªôi dung email HTML
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
        </head>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
                <h1 style="color: white; margin: 0; font-size: 28px;">üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
            </div>
            
            <div style="background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px;">
                <h2 style="color: #333; margin-top: 0;">Xin ch√†o{' ' + user_name if user_name else ''}!</h2>
                
                <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh.</p>
                
                <p>Vui l√≤ng nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
                
                <div style="text-align: center; margin: 30px 0;">
                    <a href="{reset_url}" 
                       style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                              color: white; 
                              padding: 15px 30px; 
                              text-decoration: none; 
                              border-radius: 8px; 
                              display: inline-block; 
                              font-weight: bold;
                              font-size: 16px;">
                        ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
                    </a>
                </div>
                
                <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 15px; margin: 20px 0;">
                    <h3 style="color: #856404; margin: 0 0 10px 0; font-size: 16px;">‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</h3>
                    <ul style="margin: 0; padding-left: 20px; color: #856404;">
                        <li>Li√™n k·∫øt n√†y c√≥ hi·ªáu l·ª±c trong <strong>15 ph√∫t</strong></li>
                        <li>Ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c <strong>m·ªôt l·∫ßn</strong></li>
                        <li>Kh√¥ng chia s·∫ª li√™n k·∫øt n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                        <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, vui l√≤ng b·ªè qua email n√†y</li>
                    </ul>
                </div>
                
                <div style="background: #d1ecf1; border: 1px solid #bee5eb; border-radius: 8px; padding: 15px; margin: 20px 0;">
                    <h3 style="color: #0c5460; margin: 0 0 10px 0; font-size: 16px;">üõ°Ô∏è B·∫£o m·∫≠t t√†i kho·∫£n:</h3>
                    <ul style="margin: 0; padding-left: 20px; color: #0c5460; font-size: 14px;">
                        <li>S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh (√≠t nh·∫•t 8 k√Ω t·ª±)</li>
                        <li>K·∫øt h·ª£p ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát</li>
                        <li>Kh√¥ng s·ª≠ d·ª•ng m·∫≠t kh·∫©u n√†y cho t√†i kho·∫£n kh√°c</li>
                        <li>ƒêƒÉng xu·∫•t khi s·ª≠ d·ª•ng m√°y t√≠nh chung</li>
                    </ul>
                </div>
                
                <p style="color: #666; font-size: 14px; margin-top: 30px;">
                    N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông, b·∫°n c√≥ th·ªÉ copy v√† paste li√™n k·∫øt sau v√†o tr√¨nh duy·ªát:
                    <br>
                    <a href="{reset_url}" style="color: #667eea; word-break: break-all;">{reset_url}</a>
                </p>
                
                <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">
                
                <p style="color: #999; font-size: 12px; text-align: center; margin: 0;">
                    ¬© 2025 H·ªá th·ªëng c·ªßa b·∫°n. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
                    <br>
                    Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.
                </p>
            </div>
        </body>
        </html>
        """
        
        # T·∫°o email
        msg = MIMEMultipart('alternative')
        msg['Subject'] = "üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - H·ªá th·ªëng c·ªßa b·∫°n"
        msg['From'] = FROM_EMAIL
        msg['To'] = email
        
        # Attach HTML content
        html_part = MIMEText(html_content, 'html', 'utf-8')
        msg.attach(html_part)
        
        # G·ª≠i email
        with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USER, SMTP_PASSWORD)
            server.send_message(msg)
            
        print(f"Reset password email sent to: {email}")
        return True
        
    except Exception as e:
        print(f"Error sending email to {email}: {str(e)}")
        return False
    
def get_current_user_id(token: str = Depends(oauth2_scheme)) -> int:
    payload = verify_token(token)
    if not payload:
        raise HTTPException(status_code=401, detail="Token kh√¥ng h·ª£p l·ªá")
    return payload["id"]



def get_current_user(db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)) -> User:
    payload = verify_token(token)
    if not payload:
        raise HTTPException(status_code=401, detail="Token kh√¥ng h·ª£p l·ªá")

    user_id = payload["id"]
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User kh√¥ng t·ªìn t·∫°i")
    return user

def get_admin_user(current_user: User = Depends(get_current_user)) -> User:
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p")
    return current_user