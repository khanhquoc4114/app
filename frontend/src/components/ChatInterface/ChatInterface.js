import React, { useState, useEffect, useRef } from 'react';
import {
    Input,
    Button,
    Typography,
    Space,
    Avatar,
    Tag,
    Spin,
} from 'antd';
import {
    SendOutlined,
    RobotOutlined,
    UserOutlined,
    CustomerServiceOutlined,
    QuestionCircleOutlined,
    PaperClipOutlined,
    SmileOutlined
} from '@ant-design/icons';
import dayjs from 'dayjs';

const { Text } = Typography;
const { TextArea } = Input;

const ChatInterface = ({ onClose }) => {
    const [messages, setMessages] = useState([]);
    const [inputMessage, setInputMessage] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const [chatMode, setChatMode] = useState('bot'); // 'bot' or 'human'
    const messagesEndRef = useRef(null);

    // Quick questions
    const quickQuestions = [
        'Gi·ªù m·ªü c·ª≠a c·ªßa s√¢n?',
        'C√°ch ƒë·∫∑t s√¢n?',
        'Ch√≠nh s√°ch h·ªßy ƒë·∫∑t?',
        'Gi√° thu√™ s√¢n?',
        'Li√™n h·ªá h·ªó tr·ª£'
    ];

    // Initial bot message
    useEffect(() => {
        const welcomeMessage = {
            id: 1,
            type: 'bot',
            content: 'Xin ch√†o! T√¥i l√† AI Assistant c·ªßa h·ªá th·ªëng ƒë·∫∑t s√¢n th·ªÉ thao. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ T√¨m hi·ªÉu v·ªÅ c√°c s√¢n th·ªÉ thao\n‚Ä¢ H∆∞·ªõng d·∫´n ƒë·∫∑t s√¢n\n‚Ä¢ Gi·∫£i ƒë√°p th·∫Øc m·∫Øc\n‚Ä¢ K·∫øt n·ªëi v·ªõi nh√¢n vi√™n h·ªó tr·ª£\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
            timestamp: dayjs(),
            avatar: <RobotOutlined />
        };
        setMessages([welcomeMessage]);
    }, []);

    // Auto scroll to bottom
    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    const handleSendMessage = () => {
        if (!inputMessage.trim()) return;

        const userMessage = {
            id: Date.now(),
            type: 'user',
            content: inputMessage,
            timestamp: dayjs(),
            avatar: <UserOutlined />
        };

        setMessages(prev => [...prev, userMessage]);
        setInputMessage('');
        setIsTyping(true);

        // Simulate bot response
        setTimeout(() => {
            const botResponse = generateBotResponse(inputMessage);
            const botMessage = {
                id: Date.now() + 1,
                type: 'bot',
                content: botResponse,
                timestamp: dayjs(),
                avatar: <RobotOutlined />
            };
            setMessages(prev => [...prev, botMessage]);
            setIsTyping(false);
        }, 1500);
    };

    const generateBotResponse = (userInput) => {
        const input = userInput.toLowerCase();

        if (input.includes('gi·ªù') || input.includes('m·ªü c·ª≠a')) {
            return 'H·ªá th·ªëng s√¢n th·ªÉ thao c·ªßa ch√∫ng t√¥i m·ªü c·ª≠a:\n\nüïï **Gi·ªù ho·∫°t ƒë·ªông:** 06:00 - 22:00 h√†ng ng√†y\nüè∏ **S√¢n c·∫ßu l√¥ng:** 06:00 - 22:00\n‚öΩ **S√¢n b√≥ng ƒë√°:** 05:00 - 23:00\nüéæ **S√¢n tennis:** 06:00 - 21:00\n\nB·∫°n c√≥ th·ªÉ ƒë·∫∑t s√¢n tr·ª±c tuy·∫øn 24/7!';
        }

        if (input.includes('ƒë·∫∑t s√¢n') || input.includes('booking')) {
            return 'ƒê·ªÉ ƒë·∫∑t s√¢n, b·∫°n c√≥ th·ªÉ:\n\n1Ô∏è‚É£ **Tr·ª±c tuy·∫øn:** V√†o trang "Danh s√°ch s√¢n" ‚Üí Ch·ªçn s√¢n ‚Üí Ch·ªçn ng√†y gi·ªù ‚Üí ƒê·∫∑t s√¢n\n\n2Ô∏è‚É£ **Quy tr√¨nh:**\n   ‚Ä¢ Ch·ªçn s√¢n ph√π h·ª£p\n   ‚Ä¢ Ch·ªçn ng√†y v√† khung gi·ªù\n   ‚Ä¢ ƒêi·ªÅn th√¥ng tin li√™n h·ªá\n   ‚Ä¢ Thanh to√°n online\n   ‚Ä¢ Nh·∫≠n x√°c nh·∫≠n qua email/SMS\n\n3Ô∏è‚É£ **L∆∞u √Ω:** ƒê·∫∑t tr∆∞·ªõc √≠t nh·∫•t 2 ti·∫øng ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ s√¢n!';
        }

        if (input.includes('h·ªßy') || input.includes('cancel')) {
            return '**Ch√≠nh s√°ch h·ªßy ƒë·∫∑t s√¢n:**\n\n‚úÖ **Mi·ªÖn ph√≠ h·ªßy:** Tr∆∞·ªõc 24h\nüí∞ **Ph√≠ 50%:** H·ªßy trong v√≤ng 24h\n‚ùå **Kh√¥ng ho√†n ti·ªÅn:** H·ªßy trong v√≤ng 2h\n\n**C√°ch h·ªßy:**\n‚Ä¢ V√†o "L·ªãch ƒë·∫∑t c·ªßa t√¥i"\n‚Ä¢ Ch·ªçn l·ªãch c·∫ßn h·ªßy\n‚Ä¢ Nh·∫•n "H·ªßy ƒë·∫∑t"\n‚Ä¢ X√°c nh·∫≠n h·ªßy\n\nTi·ªÅn s·∫Ω ƒë∆∞·ª£c ho√†n l·∫°i trong 3-5 ng√†y l√†m vi·ªác!';
        }

        if (input.includes('gi√°') || input.includes('price')) {
            return '**B·∫£ng gi√° thu√™ s√¢n:**\n\nüè∏ **C·∫ßu l√¥ng:**\n   ‚Ä¢ S√¢n th∆∞·ªùng: 60,000ƒë/gi·ªù\n   ‚Ä¢ S√¢n VIP: 80,000ƒë/gi·ªù\n\n‚öΩ **B√≥ng ƒë√° mini:**\n   ‚Ä¢ S√¢n 5v5: 200,000ƒë/gi·ªù\n   ‚Ä¢ S√¢n 7v7: 300,000ƒë/gi·ªù\n\nüéæ **Tennis:** 150,000ƒë/gi·ªù\nüèÄ **B√≥ng r·ªï:** 120,000ƒë/gi·ªù\n\nüí° **∆Øu ƒë√£i:** Gi·∫£m 10% khi ƒë·∫∑t t·ª´ 3 gi·ªù tr·ªü l√™n!';
        }

        if (input.includes('li√™n h·ªá') || input.includes('support')) {
            return '**Th√¥ng tin li√™n h·ªá:**\n\nüìû **Hotline:** 1900-xxxx (24/7)\nüìß **Email:** support@sportsfacility.com\nüí¨ **Chat:** Ngay t·∫°i ƒë√¢y!\n\n**ƒê·ªãa ch·ªâ c√°c s√¢n:**\nüè¢ Chi nh√°nh 1: Qu·∫≠n 1, TP.HCM\nüè¢ Chi nh√°nh 2: Qu·∫≠n 7, TP.HCM\nüè¢ Chi nh√°nh 3: Qu·∫≠n 3, TP.HCM\n\nB·∫°n mu·ªën t√¥i k·∫øt n·ªëi v·ªõi nh√¢n vi√™n h·ªó tr·ª£ kh√¥ng?';
        }

        return 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i hi·ªÉu b·∫°n ƒëang c·∫ßn h·ªó tr·ª£ v·ªÅ "' + userInput + '".\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n‚Ä¢ Th√¥ng tin s√¢n th·ªÉ thao\n‚Ä¢ H∆∞·ªõng d·∫´n ƒë·∫∑t s√¢n\n‚Ä¢ Ch√≠nh s√°ch v√† quy ƒë·ªãnh\n‚Ä¢ Gi√° c·∫£ v√† khuy·∫øn m√£i\n\nHo·∫∑c b·∫°n c√≥ th·ªÉ ch·ªçn m·ªôt trong c√°c c√¢u h·ªèi ph·ªï bi·∫øn b√™n d∆∞·ªõi, ho·∫∑c g√µ "nh√¢n vi√™n" ƒë·ªÉ k·∫øt n·ªëi v·ªõi nh√¢n vi√™n h·ªó tr·ª£!';
    };

    const handleQuickQuestion = (question) => {
        setInputMessage(question);
        setTimeout(() => handleSendMessage(), 100);
    };

    const connectToHuman = () => {
        setChatMode('human');
        const humanMessage = {
            id: Date.now(),
            type: 'system',
            content: 'ƒêang k·∫øt n·ªëi v·ªõi nh√¢n vi√™n h·ªó tr·ª£... Vui l√≤ng ch·ªù trong gi√¢y l√°t.',
            timestamp: dayjs()
        };
        setMessages(prev => [...prev, humanMessage]);

        setTimeout(() => {
            const hostMessage = {
                id: Date.now() + 1,
                type: 'host',
                content: 'Xin ch√†o! T√¥i l√† Minh - nh√¢n vi√™n h·ªó tr·ª£ kh√°ch h√†ng. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
                timestamp: dayjs(),
                avatar: <CustomerServiceOutlined />
            };
            setMessages(prev => [...prev, hostMessage]);
        }, 2000);
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    const renderMessage = (message) => {
        const isUser = message.type === 'user';
        const isSystem = message.type === 'system';

        return (
            <div
                key={message.id}
                style={{
                    display: 'flex',
                    justifyContent: isUser ? 'flex-end' : 'flex-start',
                    marginBottom: 16,
                    padding: '0 16px'
                }}
            >
                {!isUser && !isSystem && (
                    <Avatar
                        icon={message.avatar}
                        style={{
                            backgroundColor: message.type === 'host' ? '#52c41a' : '#1890ff',
                            marginRight: 8,
                            flexShrink: 0
                        }}
                        size="small"
                    />
                )}

                <div
                    style={{
                        maxWidth: '75%',
                        padding: '10px 14px',
                        borderRadius: '12px',
                        backgroundColor: isUser ? '#1890ff' : isSystem ? '#f0f0f0' : '#f6f6f6',
                        color: isUser ? 'white' : 'black',
                        wordBreak: 'break-word'
                    }}
                >
                    <div style={{ whiteSpace: 'pre-line', lineHeight: '1.4' }}>
                        {message.content}
                    </div>
                    <div
                        style={{
                            fontSize: '10px',
                            opacity: 0.7,
                            marginTop: 4,
                            textAlign: isUser ? 'right' : 'left'
                        }}
                    >
                        {message.timestamp.format('HH:mm')}
                    </div>
                </div>

                {isUser && (
                    <Avatar
                        icon={<UserOutlined />}
                        style={{ backgroundColor: '#87d068', marginLeft: 8, flexShrink: 0 }}
                        size="small"
                    />
                )}
            </div>
        );
    };

    return (
        <div style={{
            height: '100%',
            display: 'flex',
            flexDirection: 'column',
            background: '#fafafa'
        }}>
            {/* Chat mode indicator */}
            <div style={{
                padding: '12px 16px',
                background: '#fff',
                borderBottom: '1px solid #f0f0f0'
            }}>
                <Space>
                    <Tag color={chatMode === 'bot' ? 'blue' : 'default'}>
                        ü§ñ AI Assistant
                    </Tag>
                    <Tag color={chatMode === 'human' ? 'green' : 'default'}>
                        üë®‚Äçüíº Nh√¢n vi√™n h·ªó tr·ª£
                    </Tag>
                </Space>
            </div>

            {/* Messages area */}
            <div
                style={{
                    flex: 1,
                    overflowY: 'auto',
                    padding: '16px 0'
                }}
            >
                {messages.map(renderMessage)}

                {isTyping && (
                    <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        marginBottom: 16,
                        padding: '0 16px'
                    }}>
                        <Avatar
                            icon={<RobotOutlined />}
                            style={{ backgroundColor: '#1890ff', marginRight: 8 }}
                            size="small"
                        />
                        <div style={{
                            padding: '8px 12px',
                            backgroundColor: '#f6f6f6',
                            borderRadius: '12px',
                            display: 'flex',
                            alignItems: 'center'
                        }}>
                            <Spin size="small" style={{ marginRight: 8 }} />
                            <Text style={{ fontSize: '13px' }}>ƒêang tr·∫£ l·ªùi...</Text>
                        </div>
                    </div>
                )}

                <div ref={messagesEndRef} />
            </div>

            {/* Quick questions */}
            {messages.length <= 1 && (
                <div style={{
                    padding: '12px 16px',
                    background: '#fff',
                    borderTop: '1px solid #f0f0f0'
                }}>
                    <Text strong style={{ marginBottom: 8, display: 'block', fontSize: '13px' }}>
                        <QuestionCircleOutlined /> C√¢u h·ªèi th∆∞·ªùng g·∫∑p:
                    </Text>
                    <Space wrap size={[4, 4]}>
                        {quickQuestions.map((question, index) => (
                            <Button
                                key={index}
                                size="small"
                                type="text"
                                onClick={() => handleQuickQuestion(question)}
                                style={{
                                    fontSize: '12px',
                                    height: 'auto',
                                    padding: '4px 8px',
                                    border: '1px solid #d9d9d9',
                                    borderRadius: '12px'
                                }}
                            >
                                {question}
                            </Button>
                        ))}
                    </Space>
                </div>
            )}

            {/* Input area */}
            <div style={{
                padding: '16px',
                background: '#fff',
                borderTop: '1px solid #f0f0f0'
            }}>
                <div style={{ display: 'flex', gap: 8, alignItems: 'flex-end' }}>
                    <div style={{ flex: 1 }}>
                        <TextArea
                            value={inputMessage}
                            onChange={(e) => setInputMessage(e.target.value)}
                            onKeyPress={handleKeyPress}
                            placeholder="Nh·∫≠p tin nh·∫Øn... (Enter ƒë·ªÉ g·ª≠i, Shift+Enter ƒë·ªÉ xu·ªëng h√†ng)"
                            autoSize={{ minRows: 1, maxRows: 4 }}
                            style={{
                                borderRadius: '20px',
                                resize: 'none'
                            }}
                        />
                    </div>

                    <div style={{ display: 'flex', gap: 4 }}>
                        <Button
                            type="text"
                            icon={<PaperClipOutlined />}
                            size="small"
                            style={{ borderRadius: '50%' }}
                            title="ƒê√≠nh k√®m file"
                        />
                        <Button
                            type="text"
                            icon={<SmileOutlined />}
                            size="small"
                            style={{ borderRadius: '50%' }}
                            title="Emoji"
                        />
                        <Button
                            type="primary"
                            icon={<SendOutlined />}
                            onClick={handleSendMessage}
                            disabled={!inputMessage.trim()}
                            style={{ borderRadius: '50%' }}
                            title="G·ª≠i tin nh·∫Øn"
                        />
                    </div>
                </div>

                {chatMode === 'bot' && (
                    <div style={{ marginTop: 8, textAlign: 'center' }}>
                        <Button
                            type="link"
                            size="small"
                            icon={<CustomerServiceOutlined />}
                            onClick={connectToHuman}
                            style={{ fontSize: '12px' }}
                        >
                            K·∫øt n·ªëi v·ªõi nh√¢n vi√™n h·ªó tr·ª£
                        </Button>
                    </div>
                )}
            </div>
        </div>
    );
};

export default ChatInterface;