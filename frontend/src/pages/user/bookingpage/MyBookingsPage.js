import { useState, useEffect } from 'react';
import {
    Card, Typography, Space, Tag, Button, Modal, Rate, Input, Tabs, Empty, Row, Col
} from 'antd';
import {
    CalendarOutlined, ClockCircleOutlined, StarOutlined, DeleteOutlined, EditOutlined
} from '@ant-design/icons';

import dayjs from 'dayjs';
import { handleCancelBooking, formatPrice, getStatusColor, getStatusText, handleReviewBooking, handleSubmitReview } from './bookingLogic';
import { getSportName } from '../../../utils/sportsName';



const { Title, Text } = Typography;
const { TextArea } = Input;
const { TabPane } = Tabs;

// Component ch√≠nh c·ªßa trang l·ªãch ƒë·∫∑t s√¢n
const MyBookingsPage = () => {
    // State qu·∫£n l√Ω tab ƒëang ch·ªçn (s·∫Øp t·ªõi, ƒë√£ ho√†n th√†nh, ƒë√£ hu·ª∑)
    const [activeTab, setActiveTab] = useState('upcoming');
    // State hi·ªÉn th·ªã modal ƒë√°nh gi√°
    const [reviewModalVisible, setReviewModalVisible] = useState(false);
    // State l∆∞u booking ƒëang ch·ªçn ƒë·ªÉ ƒë√°nh gi√°
    const [selectedBooking, setSelectedBooking] = useState(null);
    // State ƒëi·ªÉm ƒë√°nh gi√°
    const [rating, setRating] = useState(5);
    // State n·ªôi dung nh·∫≠n x√©t
    const [review, setReview] = useState('');

    // object booking g·ªìm 3 m·∫£ng
    const [bookings, setBookings] = useState({
        upcoming: [],
        completed: [],
        cancelled: []
    });

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (!token) {
            console.error('No token found');
            return;
        }

        fetch(`${process.env.REACT_APP_API_URL}/api/bookings`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
            .then(res => res.json())
            .then(data => {
                console.log('Received booking data:', data);
                // Ph√¢n lo·∫°i booking theo status
                const upcoming = data.filter(b => b.status === 'pending');
                const completed = data.filter(b => b.status === 'confirmed');
                const cancelled = data.filter(b => b.status === 'cancelled');
                setBookings({ upcoming, completed, cancelled });
            })
            .catch(err => {
                console.error('Error fetching bookings:', err);
            });
    }, []);

    // Component b·∫£ng HTML thu·∫ßn thay th·∫ø Ant Design Table
    const CustomTable = ({ data, title }) => (
        <div style={{ overflowX: 'auto' }}>
            <table style={{ 
                width: '100%', 
                borderCollapse: 'collapse',
                backgroundColor: '#fff',
                boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
            }}>
                <thead>
                    <tr style={{ backgroundColor: '#fafafa', borderBottom: '2px solid #f0f0f0' }}>
                        <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'bold', color: '#262626' }}>
                            M√£ ƒë·∫∑t
                        </th>
                        <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'bold', color: '#262626' }}>
                            Th√¥ng tin s√¢n
                        </th>
                        <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'bold', color: '#262626' }}>
                            Th·ªùi gian
                        </th>
                        <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'bold', color: '#262626' }}>
                            S·ªë ti·ªÅn
                        </th>
                        <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'bold', color: '#262626' }}>
                            Tr·∫°ng th√°i
                        </th>
                        <th style={{ padding: '12px 16px', textAlign: 'left', fontWeight: 'bold', color: '#262626' }}>
                            Thao t√°c
                        </th>
                    </tr>
                </thead>
                <tbody>
                    {data.map((record, index) => (
                        <tr key={record.id} style={{ 
                            borderBottom: '1px solid #f0f0f0',
                            backgroundColor: index % 2 === 0 ? '#fff' : '#fafafa'
                        }}>
                            <td style={{ padding: '12px 16px', verticalAlign: 'top' }}>
                                <Text strong>{record.id}</Text>
                            </td>
                            <td style={{ padding: '12px 16px', verticalAlign: 'top' }}>
                                <div>
                                    <div style={{ fontWeight: 'bold', marginBottom: 4, color: '#262626' }}>
                                        {record.facility}
                                    </div>
                                    <div style={{ marginBottom: 2 }}>
                                        <span style={{
                                            fontSize: '11px',
                                            backgroundColor: '#e6f7ff',
                                            color: '#1890ff',
                                            padding: '2px 6px',
                                            borderRadius: '4px',
                                            border: '1px solid #91d5ff',
                                            display: 'inline-block'
                                        }}>
                                         {getSportName(record.sport_type)}
                                        </span>
                                    </div>
                                    <div style={{ fontSize: '12px', color: '#8c8c8c' }}>
                                        üìç {record.location}
                                    </div>
                                </div>
                            </td>
                            <td style={{ padding: '12px 16px', verticalAlign: 'top' }}>
                                <div>
                                    <div style={{ marginBottom: 4 }}>
                                        <CalendarOutlined style={{ marginRight: 4, color: '#1890ff' }} />
                                        {dayjs(record.start_time).format('DD/MM/YYYY')}
                                    </div>
                                    <div>
                                        <ClockCircleOutlined style={{ marginRight: 4, color: '#1890ff' }} />
                                        {dayjs(record.start_time).format('HH:mm')} - {dayjs(record.end_time).format('HH:mm')}
                                    </div>
                                </div>
                            </td>
                            <td style={{ padding: '12px 16px', verticalAlign: 'top' }}>
                                <Text strong style={{ color: '#1890ff', fontSize: '14px' }}>
                                    {formatPrice(record.total_price)}
                                </Text>
                            </td>
                            <td style={{ padding: '12px 16px', verticalAlign: 'top' }}>
                                <div>
                                    <Tag color={getStatusColor(record.status)}>
                                        {getStatusText(record.status)}
                                    </Tag>
                                    {record.refunded && (
                                        <Tag color="green" size="small" style={{ marginTop: 4, display: 'block', width: 'fit-content' }}>
                                            ƒê√£ ho√†n ti·ªÅn
                                        </Tag>
                                    )}
                                    {record.reviewed && (
                                        <Tag color="gold" size="small" style={{ marginTop: 4, display: 'block', width: 'fit-content' }}>
                                            ƒê√£ ƒë√°nh gi√°
                                        </Tag>
                                    )}
                                </div>
                            </td>
                            <td style={{ padding: '12px 16px', verticalAlign: 'top' }}>
                                <Space direction="vertical" size="small">
                                    {record.canCancel && (
                                        <Button
                                            size="small"
                                            danger
                                            icon={<DeleteOutlined />}
                                            onClick={() => handleCancelBooking(record)}
                                        >
                                            H·ªßy ƒë·∫∑t
                                        </Button>
                                    )}
                                    {record.canReview && (
                                        <Button
                                            size="small"
                                            type="primary"
                                            icon={<StarOutlined />}
                                            onClick={() => handleReviewBooking(record, setSelectedBooking, setReviewModalVisible)}
                                        >
                                            ƒê√°nh gi√°
                                        </Button>
                                    )}
                                    {activeTab === 'upcoming' && record.status === 'confirmed' && (
                                        <Button
                                            size="small"
                                            icon={<EditOutlined />}
                                        >
                                            ƒê·ªïi l·ªãch
                                        </Button>
                                    )}
                                </Space>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );

    // Hi·ªÉn th·ªã th·ªëng k√™ s·ªë l∆∞·ª£ng booking theo t·ª´ng tr·∫°ng th√°i
    const renderBookingStats = () => {
        const stats = [
            {
                title: 'S·∫Øp t·ªõi',
                value: bookings.upcoming.length,
                color: '#1890ff'
            },
            {
                title: 'ƒê√£ ho√†n th√†nh',
                value: bookings.completed.length,
                color: '#52c41a'
            },
            {
                title: 'ƒê√£ h·ªßy',
                value: bookings.cancelled.length,
                color: '#ff4d4f'
            }
        ];

        return (
            <Row gutter={16} style={{ marginBottom: 24 }}>
                {stats.map((stat, index) => (
                    <Col xs={8} key={index}>
                        <Card size="small">
                            <div style={{ textAlign: 'center' }}>
                                <div style={{
                                    fontSize: '24px',
                                    fontWeight: 'bold',
                                    color: stat.color
                                }}>
                                    {stat.value}
                                </div>
                                <div style={{ fontSize: '12px', color: '#666' }}>
                                    {stat.title}
                                </div>
                            </div>
                        </Card>
                    </Col>
                ))}
            </Row>
        );
    };

    // Render giao di·ªán ch√≠nh
    return (
        <div>
            <div style={{ marginBottom: 24 }}>
                <Title level={2}>L·ªãch ƒë·∫∑t s√¢n c·ªßa t√¥i</Title>
                <Text type="secondary">Qu·∫£n l√Ω v√† theo d√µi c√°c l·∫ßn ƒë·∫∑t s√¢n</Text>
            </div>

            {renderBookingStats()}
            {/* Hi·ªÉn th·ªã b·∫£ng booking theo t·ª´ng tab */}
            <Card>
                <Tabs activeKey={activeTab} onChange={setActiveTab}>
                    <TabPane tab="S·∫Øp t·ªõi" key="upcoming">
                        {bookings.upcoming.length > 0 ? (
                            <CustomTable data={bookings.upcoming} title="S·∫Øp t·ªõi" />
                        ) : (
                            <Empty description="Kh√¥ng c√≥ l·ªãch ƒë·∫∑t s√¢n n√†o s·∫Øp t·ªõi" />
                        )}
                    </TabPane>

                    <TabPane tab="ƒê√£ ho√†n th√†nh" key="completed">
                        {bookings.completed.length > 0 ? (
                            <CustomTable data={bookings.completed} title="ƒê√£ ho√†n th√†nh" />
                        ) : (
                            <Empty description="Ch∆∞a c√≥ l·ªãch ƒë·∫∑t s√¢n n√†o ho√†n th√†nh" />
                        )}
                    </TabPane>

                    <TabPane tab="ƒê√£ h·ªßy" key="cancelled">
                        {bookings.cancelled.length > 0 ? (
                            <CustomTable data={bookings.cancelled} title="ƒê√£ h·ªßy" />
                        ) : (
                            <Empty description="Kh√¥ng c√≥ l·ªãch ƒë·∫∑t s√¢n n√†o b·ªã h·ªßy" />
                        )}
                    </TabPane>
                </Tabs>
            </Card>

            {/* Modal ƒë√°nh gi√° s√¢n */}
            <Modal
                title="ƒê√°nh gi√° s√¢n th·ªÉ thao"
                open={reviewModalVisible}
                onCancel={() => setReviewModalVisible(false)}
                onOk={() => handleSubmitReview(setReviewModalVisible, setRating, setReview)}
                okText="G·ª≠i ƒë√°nh gi√°"
                cancelText="H·ªßy"
            >
                {selectedBooking && (
                    <div>
                        <div style={{ marginBottom: 16 }}>
                            <Text strong>S√¢n: </Text>
                            <Text>{selectedBooking.facility}</Text>
                        </div>

                        <div style={{ marginBottom: 16 }}>
                            <Text strong>ƒê√°nh gi√°: </Text>
                            <Rate value={rating} onChange={setRating} />
                        </div>

                        <div>
                            <Text strong>Nh·∫≠n x√©t: </Text>
                            <TextArea
                                rows={4}
                                value={review}
                                onChange={(e) => setReview(e.target.value)}
                                placeholder="Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ s√¢n n√†y..."
                            />
                        </div>
                    </div>
                )}
            </Modal>
        </div>
    );
};

export default MyBookingsPage;