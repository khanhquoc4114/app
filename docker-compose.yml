services:
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    volumes:
      - ./auth-service/app:/app/app  # Hot reload
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - microservice_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=Host(`localhost`) && PathPrefix(`/auth`)"
      - "traefik.http.routers.auth-service.entrypoints=web"
      - "traefik.http.services.auth-service.loadbalancer.server.port=8000"
      - "traefik.docker.network=microservice_net"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  todo-service:
    build:
      context: ./todo-service
      dockerfile: Dockerfile
    container_name: todo-service
    restart: unless-stopped
    volumes:
      - ./todo-service/app:/app/app  # Hot reload
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
    ports:
      - "8001:8001"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - microservice_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.todo-service.rule=Host(`localhost`) && PathPrefix(`/todos`)"
      - "traefik.http.routers.todo-service.entrypoints=web"
      - "traefik.http.services.todo-service.loadbalancer.server.port=8001"
      - "traefik.docker.network=microservice_net"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  traefik:
    image: traefik:v3.5.0
    container_name: traefik-gateway
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - microservice_net

  db:
    image: postgres:17-alpine
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-myapp}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - microservice_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-myapp}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
  
  ui-service:
    build:
      context: ./ui-service
      dockerfile: Dockerfile
    container_name: ui-frontend
    ports:
      - "5173:5173"
    volumes:
      - ./ui-service/src:/app/src
      - /app/node_modules
    command: npm run dev -- --host
    environment:
      - CHOKIDAR_USEPOLLING=true 
      - CHOKIDAR_INTERVAL=100
      - VITE_BASE_URL=/
    networks:
      - microservice_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ui-service.rule=Host(`localhost`)"
      - "traefik.http.routers.ui-service.entrypoints=web"
      - "traefik.http.services.ui-service.loadbalancer.server.port=5173"
      - "traefik.http.routers.ui-service.middlewares=ui-websocket"
      - "traefik.docker.network=microservice_net"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - microservice_net
    security_opt:
      - no-new-privileges:true

networks:
  microservice_net:
    driver: bridge

volumes:
  pgdata:
    driver: local
  pgadmin_data:
    driver: local
